import sys
import itertools


INVALID = 0
ONEKIND = 1
TWOKIND = 2
THREEKIND = 3
FOURKIND = 4
STRAIGHT = 'straight'



def parse_card(card):
    try:
        assert len(card) == 2
        value = card[0]
        suit = card[1]
    except:
        print "Invalid card"
        raise TypeError
    if value == '0':
        value = 10
    elif value == 'J':
        value = 11
    elif value == 'Q':
        value = 12
    elif value == 'K':
        value = 13
    elif value == 'A':
        value = 14
    elif value == '2':
        value = 15
    else:
        value = int(value)
    return((value,suit))



def parse_card_rec(cards):
    if isinstance(cards,str):
        return parse_card(cards)
    else:
        parsed_cards = []
        for card in cards:
            parsed_cards.append(parse_card(card))
        return parsed_cards
    
    
    
def get_play_type(cards):
    cards.sort()
    cards_len = len(cards)
    if cards_len == 1:
        return ONEKIND,cards[0][0]
    prev_val = cards[0][0]
    first_suit = cards[0][1]
    same_value = same_suit = straight = True
    for val,suit in cards[1:]:
        if val != prev_val:
            same_value = False
        if suit == first_suit:
            if val == prev_val + 1:
                prev_val += 1
            else:
                straight = False
        else:
            same_suit = False
    if same_value:
        if cards_len == 2:
            return TWOKIND,cards[0][0]
        elif cards_len == 3:
            return THREEKIND,cards[0][0]
        elif cards_len == 4:
            return FOURKIND,cards[0][0]
        else:
            return INVALID,None
    elif same_suit and straight and 3 <= cards_len <= 5:
        return STRAIGHT,cards[-1][0]
    else:
        return INVALID,None
        

    
    
def generate_plays(hand):
    return [list(c) for i in range(5) for c in itertools.combinations(hand, i+1) if get_play_type(parse_card_rec(c))[0] != INVALID]
    



def is_valid_play(prev,play):
    if prev == [] or prev == None:
        return True
    else:
        prev_type,prev_val = get_play_type(parse_card_rec(prev))
        play_type,play_val = get_play_type(parse_card_rec(play))
        return prev_type == play_type and prev_val < play_val



    
def get_valid_plays(prev, hand, generate=generate_plays,is_valid=is_valid_play):
    valid_plays = []
    for play in generate_plays(hand):
        if is_valid(prev,play):
            valid_plays.append(play)
    return valid_plays


        
def play(prev,hand,discard,holding,generate=generate_plays,is_valid=is_valid_play,valid=get_valid_plays):
    from random import choice
    try:
        valid_plays = get_valid_plays(prev,hand,generate=generate_plays,is_valid=is_valid_play)
        if len(discard[-1]) == 0:
            return sorted(valid_plays,key=lambda x: (5-len(x),parse_card(x[-1])))[0]
        else:
            if discard[-1][-3:] == [None,None,None]:
                return None
            else:
                return sorted(valid_plays,key=lambda x: parse_card_rec(x))[0]
    except:
        return None
